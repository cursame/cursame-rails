= form_for( @course, html: { class: "default-form edit-course border_for_text", id: "course-form" }) do |f|
  .body.padded

    .form-group
      .form-group-label
        = f.label :title, "Nombre del #{current_network.course_tag.downcase}"
        %label
      .form-group-main
        .form-unit
          = f.text_field :title, placeholder: 'Ejemplo: Matemáticas I', required: "required", autocomplete: "off"

    .form-group
      .form-group-label
        = f.label :silabus, "Descripción del #{current_network.course_tag.downcase}"
      .form-group-main
        .form-unit
          = f.text_area :silabus, rows: 4, placeholder: 'Descripción', required: "required", autocomplete: "off"

    .form-group
      .form-group-label
        = f.label :public_status, "Privacidad"
      .form-group-main
        .form-unit
          - if @course.public_status == 'public'
            = f.select :public_status, options_for_select([['Público', 'public'],['Privado', 'Private']])
          - else
            = f.select :public_status, options_for_select([['Privado', 'Private'],['Público', 'public']])

    .form-group
      .form-group-label
        = f.label :init_date, "Fecha de inicio"
      .form-group-main
        .f-col.f-col-5
          .form-unit
            = f.text_field :init_date, placeholder: 'Fecha inicio', class: "date-input", value: (f.object.init_date)? f.object.init_date.strftime('%m/%d/%Y'):f.object.init_date, required: "required", autocomplete: "off"
        .f-col.f-col-5

    .form-group
      .form-group-label
        = f.label 'students-search', "Estudiantes:", for: 'students-search-input'
      .form-group-main
        .form-unit
          = hidden_field_tag "check_members", true
          .table-box#autocomplete-users-box
            .table-box-header
              %p Busca por nombre estudiantes que deseas inscribir a este curso.
              = text_field_tag 'students-search', '', id: 'students-search-input', placeholder: 'Escribe un nombre o apellido.'
            .table-box-body.scrollbar
              .users-list
                - unless @course.new_record?
                  - unless @course.students.blank?
                    - @course.students.each do |student|
                      - member = MembersInCourse.find_by_user_id_and_course_id(student.id, @course.id)
                      .table-box-unit{ data: { user_id: student.id } }
                        %label{class: "table-box-unit-inner#{member.nil? ? "" : " active"}"}
                          = avatar('user', '30', "no", student.id, "avatar", "no", "no")
                          %span= student.last_name + " " +student.first_name
                          = icon('checked-16')
                          = check_box_tag("students["+student.id.to_s+"]", value = member.nil? ? "0" : member.accepted ? "1" : "0", checked = member.nil? ? false : member.accepted, class: 'toggle-label-js')
                - if @course.new_record? || @course.students.blank?
                  .inner-no-content
                    %h5 Inscribe estudiantes a tu curso.
                    %p Busca estudiantes para unirlos automaticamente al curso.


  .footer
    .fl
      %span.btn.btn-primary.input-btn.activable
        = f.submit "#{ @course.new_record? ? "Crear" : "Actualizar" } #{current_network.course_tag}", class: "activable"
    .fr
      - unless @course.new_record?
        = link_to "Eliminar curso permanente.", @course, confirm: '¿Esta seguro que desea eliminar este curso?', method: :delete, style: 'line-height: 32px;'


:javascript
  function readURL(input, id, width) {
    if (input.files && input.files[0]) {
      var reader = new FileReader();
      reader.onload = function (e) {
        $('#' + id)
        .attr('src', e.target.result)
      };
      reader.readAsDataURL(input.files[0]);
    }
  }
    
  $(function() {
    $("#course_init_date" ).datepicker({
        inline: true,
        minDate: 0,
        showOtherMonths: true,
        dateFormat: 'dd/mm/yy',
        monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio','Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
        dayNamesMin: ['Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab']
    });

    $( "#students-search-input" ).autocomplete({
      source: '#{ network_students_path }',
       messages: {
        noResults: 'No se encontro nigun estudiante.',
        results: function(count) {
          return "";
        }
      },
      select: function (event, user) {
        var usersList = $('#autocomplete-users-box'),
            userContainer = usersList.find('div.users-list'),
            noContent = usersList.find('div.inner-no-content'),
            users = usersList.find('div.table-box-unit'),
            already = false;

        if ( noContent.length ) {
          noContent.remove();
        };

        if ( users.length ) {
          $.each(users, function(index, member) {
            if ( $(member).data('user-id') == user.item.id ) {
              already = true;
              return false;
            };
          });
        };

        if ( already ) {
          Notice('error', 'El estudiante que seleccionaste ya es miembro.')
        } else {
          userContainer.append( HandlebarsTemplates['users/autocomplete-user-unit']( user ) );
        };
      }
    }).data( "autocomplete" )._renderItem = function( ul, item ) {
      var avatarURL;

      if ( item.avatar.head.url ) {
        avatarURL = item.avatar.head.url;
      } else {
        avatarURL = "/assets/imagexxxx.png"
      };

      return $( "<li>" ).append( "<a> <img class='avatar' src='" + avatarURL + "' alt=''/>" + item.last_name + " "+ item.first_name + "</a>" ).appendTo( ul );
    };

  });